#!/usr/bin/env python
# -*- coding: utf-8 -*-

__authors__  = (
    'wrtyis@outlook.com'
	)

__license__ = 'GPLv3'
__version__ = '0.0.1'

"""
ASS 字幕格式规范:
https://github.com/weizhenye/ASS/wiki/ASS-字幕格式规范

"""

""" 
鸣谢:
https://archive.org/details/youtubeannotations

"""

#祝 Google 早日亲妈爆炸!

import argparse
import xml.etree.ElementTree
import sys

class Annotations2Sub():
    def __init__(self,string,Title='默认文件',PlayResX=1920,PlayResY=1080,Zoom=1):
        self.info = Annotations2Sub.SimpeAssTools.info()
        self.style = Annotations2Sub.SimpeAssTools.style()
        self.event = Annotations2Sub.SimpeAssTools.event()
        self.save = Annotations2Sub.SimpeAssTools.save
        self.tab_helper = Annotations2Sub.SimpeAssTools.tab_helper
        self.info.change(Title,PlayResX,PlayResY)
        self.style.change('Defaults',ScaleX=PlayResX/1280*100*Zoom,ScaleY=PlayResY/720*100*Zoom)
        self.xml = xml.etree.ElementTree.fromstring(string)
        self._convert(self.xml) 
        self.save(self,file_name=Title)

    def _convert(self,string):
        for each in self.xml.find('annotations').findall('annotation'):
            #处理 annotation id
            Name = each.get('id')
            #处理文本
            Text = each.find('TEXT')
            if Text is not None:
                Text = Text.text.replace('\n',r'\N')
            else:
                Text = ''
            #处理时间
            try:
                Time = each.find('segment').find('movingRegion').findall('rectRegion')
            except:
                if not Time:
                    Time = each.find('segment').find('movingRegion').findall('anchoredRegion')
                if not Time:
                    continue
            Start = min(Time[0].get('t'), Time[1].get('t'))
            End = max(Time[0].get('t'), Time[1].get('t'))
            if "never" in (Start, End):
                continue
            #处理位置
            x = map(float, (Time[0].get(i) for i in ('x')))
            y = map(float, (Time[0].get(i) for i in ('y')))
            #处理颜色
            if each.find('appearance') is not None:
                if each.find('appearance').get('fgColor') is not '0':
                    PrimaryColour = r'&H'+each.find('appearance').get('fgColor')
                else:
                    PrimaryColour = '&H00FFFFFF'
                if each.find('appearance').get('bgColor') is not '0':
                    BackColour = r'&H'+each.find('appearance').get('bgColor')
                else:
                    BackColour = '&HAB000000'
            else:
                PrimaryColour = '&H00FFFFFF'
                BackColourBackColour = '&HAB000000'
            #提交
            self.event.add(self,Start,End,self.tab_helper(Text,PrimaryColour,BackColour,x,y))

    class SimpeAssTools(object):
        def save(self,file_name):
            with open(file_name+'.ass', 'w',encoding='utf-8') as f:
                f.write(self.info.dump())
                f.write(self.style.dump())
                f.write(self.event.dump())

        def tab_helper(self,Text,PrimaryColour=None,BackColour=None,x=None,y=None):
            return 'Text'

        class info(object):
            def __init__(self):
                self.HEAD = "[Script Info]\n"\
                            "; Script generated by Annotations2Sub\n"\
                            "; https://github.com/WRTYis/Annotations2Sub"
                self.data={
                    'Title':'Default File',
                    'ScriptType':'1',
                    'WrapStyle':'1',
                    'ScaledBorderAndShadow':'1',
                    'YCbCr Matrix':'1',
                    'PlayResX':'1920',
                    'PlayResY':'1080'}

            def change(self,Title=None,PlayResX=None,PlayResY=None):
                pass

            def dump(self):
                data = self.HEAD + str(self.data)
                return data

        class style(object):
            def __init__(self):
                self.HEAD = "\n"\
                            "[V4+ Styles]\n"\
                            "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding"

                self.data = {}
                self.add(Name='Default')

            def add(self,Name,Fontname='Arial',Fontsize=20,PrimaryColour='&H00FFFFFF',SecondaryColour='H000000FF',OutlineColour='&H6B000000',BackColour='&HAB000000',Bold=0,Italic=0,Underline=0,StrikeOut=0,ScaleX=100,ScaleY=100,Spacing=0,Angle=0,BorderStyle=3,Outline=2,Shadow=0,Alignment=2,MarginL=10,MarginR=10,MarginV=10,Encoding=1):
                self.data[Name] = [Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding]

            def change(self,Name=None,Fontname=None,Fontsize=None,PrimaryColour=None,SecondaryColour=None,OutlineColour=None,BackColour=None,Bold=None,Italic=None,Underline=None,StrikeOut=None,ScaleX=None,ScaleY=None,Spacing=None,Angle=None,BorderStyle=None,Outline=None,Shadow=None,Alignment=None,MarginL=None,MarginR=None,MarginV=None,Encoding=None):
                pass

            def dump(self):
                data = str(self.data)
                return data

        class event(object):
            def __init__(self):
                self.HEAD = "\n"\
                            "[Events]\n"\
                            "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"
                self.data = []

            def add(self,Layer=0, Start='0:00:00.00', End='0:00:00.00', Style='Default', Name=None, MarginL=0, MarginR=0, MarginV=0, Effect=None,Text=''):
                self.data.append([Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text])
                pass
            def dump(self):
                data = self.HEAD + str(self.data)
                return data

def main():
    parser = argparse.ArgumentParser(description='一个可以把Youtube注释转换成ASS字幕的脚本')
    parser.add_argument('File',type=str,help='待转换的文件')
    parser.add_argument('--PlayResX',default=1920,type=int,help='视频宽度,默认是1920')
    parser.add_argument('--PlayResY',default=1080,type=int,help='视频高度,默认是1080')
    parser.add_argument('--Zoom',default=1,type=int,help='缩放系数,默认是1')
    args = parser.parse_args()
    ass = Annotations2Sub(open(args.File,'r',encoding="utf-8").read(),args.File,args.PlayResX,args.PlayResY,args.Zoom)
    print("Done.")

if __name__ == "__main__":
    main()
