#!/usr/bin/env python
# -*- coding: utf-8 -*-

__authors__  = (
    'wrtyis@outlook.com'
	)

__license__ = 'GPLv3'
__version__ = '0.0.1'

"""
ASS 字幕格式规范:
https://github.com/weizhenye/ASS/wiki/ASS-字幕格式规范

"""

""" 
鸣谢:
https://archive.org/details/youtubeannotations

"""

#祝 Google 亲妈爆炸!

import xml.etree.ElementTree
import sys

def main():
    if len(sys.argv) < 2 or sys.argv[1] in ("--help", "-h"):
        print("Usage: {0} <file> " .format(sys.argv[0]))
        exit(0)
    ass = Annotations2Sub(open(sys.argv[1],'r',encoding="utf-8").read(),sys.argv[1])
    print("Done.")

class Annotations2Sub(AssTools):
    def _init_(self,string,Title,PlayResX,PlayResY):
        super(self)._init_(Title,PlayResX,PlayResY)
        self.xml = xml.etree.ElementTree.fromstring(string)
        self._convert(self.xml) 
        self.save()

    def _convert(self,string):

        for each in self.xml.find('annotations').findall('annotation'):
            #处理 annotation id
            Name = each.get('id')
            #处理文本
            Text = each.find('TEXT').text.replace('\n',r'\N')
            #处理时间
            Time = each.find('segment').find('movingRegion').findall('rectRegion')
            if not Time:
                Time = each.find('segment').find('movingRegion').findall('anchoredRegion')
            if not Time:
                continue
            Start = min(Time[0].get('t'), Time[1].get('t'))
            End = max(Time[0].get('t'), Time[1].get('t'))
            if "never" in (Start, End):
                print("Found annotation that shouldn't be shown, skipping...")
                continue
            #处理位置
            x = map(float, (Time[0].get(i) for i in ('x')))
            y = map(float, (Time[0].get(i) for i in ('y')))
            #处理颜色
            if each.find('appearance') is not None:
                if each.find('appearance').get('fgColor') is not '0':
                    PrimaryColour = r'&H'+each.find('appearance').get('fgColor')
                else:
                    PrimaryColour = '1'
                if each.find('appearance').get('bgColor') is not '0':
                    BackColour = r'&H'+each.find('appearance').get('bgColor')
                else:
                    BackColour = '0'
            else:
                PrimaryColour = '1'
                BackColourBackColour = '0'
            #提交
            self.events.add(Start,End,self.tab_helper(Text,PrimaryColour,BackColour,x,y))

class AssTools(object):
    def _init_(self,Title,PlayResX,PlayResY):
        self.info._init(Title,PlayResX,PlayResY)
        self.styles._init()
        self.events._init()

    def save(self):
        with open(self._init_.Title+'.ass', 'w',encoding='utf-8') as f:
            f.write(self.info.dump)
            f.write(self.styles.dump)
            f.write(self.events.dump)
            f.write()
        

    def info(self):
        def _init(self,Title,PlayResX,PlayResY):
            self.Script_Info =      "[Script Info]\n" \
                                    "; Script generated by Annotations2Sub\n"\
                                    "; https://github.com/WRTYis/Annotations2Sub\n"\
                                    "Title: Default file\n"\
                                    "ScriptType: v4.00+\n"\
                                    "WrapStyle: 0\n"\
                                    "ScaledBorderAndShadow: yes\n"\
                                    "YCbCr Matrix: None\n"\
                                    "PlayResX: 1920\n"\
                                    "PlayResY: 1080\n"\
                                    "\n"

        def dump(self):
            pass

    def styles(self):
        def _init(self):
            self.V4_Styles =        "[V4+ Styles]\n"\
                                    "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding"
            self.styles = {}
            self.styles.add()

        def add(styles,Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding):
            pass
        
        def dump(self):
            pass

    def events(self):
        def _init(self):
            self.Events =           "[Events]\n"\
                                    "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"

            self.events = {}

        def add(Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text):
            pass

        def dump(self):
            pass

    def tab_helper(self,Text,PrimaryColour,BackColour,x,y):
        pass
        return 'Text'

if __name__ == "__main__":
    main()
