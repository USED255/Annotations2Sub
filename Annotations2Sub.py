#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__authors__  = (
    'wrtyis@outlook.com'
 )

__license__ = 'GPLv3'
__version__ = '0.0.2'

"""
参考:
https://github.com/weizhenye/ASS/wiki/ASS-字幕格式规范

"""

""" 
鸣谢:
https://archive.org/details/youtubeannotations

"""

import argparse
import xml.etree.ElementTree

class AssTools():
    def __init__(self):
        self.info = self._info()
        self.style = self._style()
        self.event = self._event()
    class _info(object):
        def __init__(self):
            self.HEAD = "[Script Info]\n"
            self.note = "; Script generated by Annotations2Sub\n"\
                        "; https://github.com/WRTYis/Annotations2Sub\n"
            self.data={
                'Title':'Default File',
                'ScriptType':'v4.00+',
                'PlayResX': '100',
                'PlayResY': '100'}

        def change(self,Title=None,PlayResX=None,PlayResY=None):
            for k,v in {'Title':Title,'PlayResX':PlayResX,'PlayResY':PlayResY}.items():
                if v is not None:
                    self.data[k]=v

        def dump(self):
            data = ''
            data += self.HEAD
            data += self.note
            for k, v in self.data.items():
                data += str(k)+': '+str(v)+'\n'
            return data

    class _style(object):
        def __init__(self):
            self.HEAD = "\n"\
                        "[V4+ Styles]\n"\
                        "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n"
            self.data = {}
            self.add(Name='Default',Fontname='Microsoft YaHei UI')

        def add(self,Name,Fontname='Arial',Fontsize=20,PrimaryColour='&H00FFFFFF',SecondaryColour='&H000000FF',OutlineColour='&H00000000',BackColour='&H00000000',Bold=0,Italic=0,Underline=0,StrikeOut=0,ScaleX=100,ScaleY=100,Spacing=0,Angle=0,BorderStyle=1,Outline=2,Shadow=2,Alignment=2,MarginL=10,MarginR=10,MarginV=10,Encoding=1):
            self.data[Name] = [Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding]

        def change(self,Name,Fontname=None,Fontsize=None,PrimaryColour=None,SecondaryColour=None,OutlineColour=None,BackColour=None,Bold=None,Italic=None,Underline=None,StrikeOut=None,ScaleX=None,ScaleY=None,Spacing=None,Angle=None,BorderStyle=None,Outline=None,Shadow=None,Alignment=None,MarginL=None,MarginR=None,MarginV=None,Encoding=None):
            for i,v in enumerate([Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding]):
                if v is not None:
                    self.data[Name][i] = v

        def dump(self):
            data = ''
            data += self.HEAD
            for k, v in self.data.items():
                data += 'Style: ' + str(k) +','
                for i,d in enumerate(v):
                    if i == 21:
                        data += str(d)
                    else:
                        data += str(d) + ','
                data +=  '\n'
            return data

    class _event(object):
        def __init__(self):
            self.HEAD = "\n"\
                        "[Events]\n"\
                        "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"
            self.data = []

        def add(self,Layer=0, Start='0:00:00.00', End='0:00:00.00', Style='Default', Name='', MarginL=0, MarginR=0, MarginV=0, Effect='',Text=''):
            self.data.append([Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text])

        def dump(self):
            data = ''
            data += self.HEAD
            for v in self.data:
                data += 'Dialogue: '
                for i,d in enumerate(v):
                    if i == 9:
                        data += str(d)
                    else:
                        data += str(d) + ','
                data +='\n'
            return data

class Annotations2Sub():
    def __init__(self,string,Title='默认文件'):
        self.asstools = AssTools()
        self.xml = xml.etree.ElementTree.fromstring(string)
        self.asstools.info.change(Title=Title)
        self._convert()

    def save(self,File):
        with open(File + '.ass', 'w', encoding='utf-8') as f:
            f.write(self.asstools.info.dump())
            f.write(self.asstools.style.dump())
            f.write(self.asstools.event.dump())
            print("Save in \"{}.ass\"".format(File))

    def _convert(self):
        for each in self.xml.find('annotations').findall('annotation'):

            #处理 annotation id
            Name = each.get('id')

            #处理时间
            _Segment = each.find('segment').find('movingRegion').findall('rectRegion')
            if _Segment is None:
                _Segment = each.find('segment').find('movingRegion').findall('anchoredRegion')
            if _Segment is None:
                Start = '0:00:00.00'
                End = '0:00:00.00'
            if _Segment is not None:
                Start = min(_Segment[0].get('t'), _Segment[1].get('t'))
                End = max(_Segment[0].get('t'), _Segment[1].get('t'))
            if "never" in (Start, End):
                Start = '0:00:00.00'
                End = '999:00:00.00'

            #获取样式
            style = each.get('style')

            #处理文本
            Text = each.find('TEXT')
            if Text is  None:
                Text = ''
            else:
                Text = Text.text.replace('\n',r'\N')
            
            #处理颜色
            fgColor = None
            bgColor = None
            if each.find('appearance') is None:
                fgColor = r'&HFFFFFF'
                bgColor = r'&H000000'
            if each.find('appearance').get('fgColor') == '0' and fgColor == None:
                fgColor = r'&HFFFFFF'
            if each.find('appearance').get('bgColor') == '0' and bgColor == None:
                bgColor = r'&H000000'
            if fgColor is None:
                fgColor = r'&H'+str(hex(int(each.find('appearance').get('fgColor')))).replace('0x','')+r'&'
            if bgColor is None:
                bgColor = r'&H'+str(hex(int(each.find('appearance').get('bgColor')))).replace('0x','')+r'&'

            #处理文本大小
            fontsize = each.find('appearance').get('textSize')


            #处理透明度
            bgAlpha = r'&H'+str(hex(int((1-float(each.find('appearance').get('bgAlpha')))*255))).replace('0x','')+r'&'

            #处理文本框
            '''
                x,y: 文本框左上角的坐标
                w,h: 文本框的宽度和高度
            '''
            (x, y, w, h) = map(float,(_Segment[0].get(i) for i in ('x','y','w','h')))
            if style == 'popup':
                (x,y,p) = self._popup_draw_helper(x,y,w,h)
                TextBox = r'{\p1}'+p+r'{\p0}'
                #fontsize = str(float(fontsize)*0.8)
                TextBox=self._tab_helper(Text=TextBox,PrimaryColour=bgColor,x=x,y=y,fontsize=fontsize,PrimaryAlpha=bgAlpha,SecondaryAlpha=r'&HFF&',BorderAlpha=r'&HFF&',ShadowAlpha=r'&HFF&')
                Text= self._tab_helper(Text=Text,PrimaryColour=fgColor,x=x,y=y+4,fontsize=fontsize,SecondaryAlpha=r'&HFF&',BorderAlpha=r'&HFF&',ShadowAlpha=r'&HFF&')
                self.asstools.event.add(Start=Start,End=End,Name=Name+'_TextBox',Text=TextBox)
                self.asstools.event.add(Start=Start,End=End,Name=Name,Text=Text)
            else:
                print("Sorry,this script can't handle {} style yet({})".format(style,Name))
                Name +=r'_title'
                (x,y,p) = self._popup_draw_helper(x,y,w,h)
                fontsize = str(float(fontsize)/4)
                Text= self._tab_helper(Text=Text,PrimaryColour=fgColor,x=x,y=y,fontsize=fontsize,SecondaryAlpha=r'&HFF&',BorderAlpha=r'&HFF&',ShadowAlpha=r'&HFF&')
                self.asstools.event.add(Start=Start,End=End,Name=Name,Text=Text)


    def _tab_helper(self,Text='',PrimaryColour=None,SecondaryColour=None,BorderColor=None,ShadowColor=None,x=None,y=None,fontsize=None,PrimaryAlpha=None,SecondaryAlpha=None,BorderAlpha=None,ShadowAlpha=None,p=None):
        _tab = ''
        if (x,y) is not None:
            _pos = "\\pos({},{})".format(x,y)
            _an = r'\an7'
            _tab += _pos + _an
        if PrimaryColour is not None:
            _c = r'\c' + PrimaryColour
            _tab += _c
        if SecondaryColour is not None:
            _2c = r'\2c' + SecondaryColour
            _tab += _2c
        if BorderColor is not None:
            _3c = r'\3c' + BorderColor
            _tab += _3c
        if ShadowColor is not None:
            _4c = r'\4c' + ShadowColor
            _tab += _4c
        if fontsize is not None:
            _fs = r'\fs' + fontsize
            _tab += _fs
        if PrimaryAlpha is not None:
            _1a = r'\1a' + PrimaryAlpha
            _tab += _1a
        if SecondaryAlpha is not None:
            _2a = r'\2a' + SecondaryAlpha
            _tab += _2a
        if BorderAlpha is not None:
            _3a = r'\3a' + BorderAlpha
            _tab += _3a
        if ShadowAlpha is not None:
            _4a = r'\4a' + ShadowAlpha
            _tab += _4a
        _text = r'{' + _tab + r'}' + Text
        return _text
        #{\2c&H2425DA&\pos(208,148)}test

    def _popup_draw_helper(self,x,y,w,h):
        _x=x
        _y=y
        _p="m 0 0 l {0} 0 l {0} {1} l 0 {1} ".format(w,h)
        return _x, _y, _p

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='一个可以把Youtube注释转换成ASS字幕的脚本')
    parser.add_argument('File',type=str,help='待转换的文件',)
    args = parser.parse_args()
    ass = Annotations2Sub(string=open(args.File,'r',encoding="utf-8").read(),Title=args.File)
    ass.save(File=args.File)
